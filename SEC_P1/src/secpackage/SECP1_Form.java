/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package secpackage;

import java.util.HashSet;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.util.Random; 
import java.util.Set;

/**
 *
 * @author sanidhya
 */
public class SECP1_Form extends javax.swing.JFrame {

    public Integer count = -1;
    DefaultTableModel model = null;
    public ListSelectionModel rowSelectionModel = null;
    final String lexicon = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcsdefghijklmnopqrstuvwxyz";
    final java.util.Random rand = new java.util.Random();
    final Set<String> identifiers = new HashSet<String>();
    public int row = -1;
    
    /**
     * Creates new form SECP1_Form
     */
    public SECP1_Form() 
    {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        model = (DefaultTableModel)queueTable.getModel();
        jLabel1.setVisible(false);
        pause_button.setEnabled(false);
        unpause_button.setEnabled(false);
        remove_button.setEnabled(false);
        pause_button.setToolTipText("Select an entry to pause");
        unpause_button.setToolTipText("Select an entry to unpause");
        remove_button.setToolTipText("Select an entry to remove");
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        queueTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        queueTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        ((DefaultTableCellRenderer)queueTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);
         this.initTable();
        if(queueTable.getRowCount() < 1)
            jLabel1.setVisible(true);
        queueTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    }
    
    public String getName()
    {
        return (String)this.queueTable.getValueAt(queueTable.getSelectedRow(), 0);
    }
    
    public String getUserStatus()
    {
        return (String)this.queueTable.getValueAt(queueTable.getSelectedRow(), 1);
    }
    
    public void removeTableRow(int val)
    {
        model.removeRow(val);
    }
    
    public int getRowCount() {
        return model.getRowCount();
    }
    
    
    public void initTable()
    {
        int rand = this.getRandomNumberInRange(0, 4);
        for(int i =0; i <rand; i++)
        {
            RowModel row = new RowModel();
            row.name = this.generateName();
            row.status = "Unpaused";
            row.email = row.name + "@gmail.com";
            model.addRow(new Object[]{row.name, row.status});
        }
    }
    
    private static int getRandomNumberInRange(int min, int max) 
    {
        if (min >= max) 
        {
                throw new IllegalArgumentException("max must be greater than min");
        }
        Random r = new Random();
        return r.nextInt((max - min) + 1) + min;
    }
    
    public String generateName()
    {
        StringBuilder builder = new StringBuilder();
        while(builder.toString().length() == 0) 
        {
            int length = rand.nextInt(5)+5;
            for(int i = 0; i < length; i++) {
                builder.append(lexicon.charAt(rand.nextInt(lexicon.length())));
            }
            if(identifiers.contains(builder.toString())) {
                builder = new StringBuilder();
            }
        }
        String output = builder.toString().substring(0, 1).toUpperCase() + builder.toString().substring(1,builder.length()).toLowerCase();
        return output;    
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        add_button = new javax.swing.JButton();
        remove_button = new javax.swing.JButton();
        pause_button = new javax.swing.JButton();
        unpause_button = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        queueTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        add_button.setText("Add");
        add_button.setToolTipText("Adds a new entry to the queue.");
        add_button.addActionListener(new AddButtonListener(this));

        remove_button.setText("Remove");
        remove_button.setToolTipText("Removes selected entry from queue.");
        remove_button.addActionListener(new RemoveButtonListener(this));

        pause_button.setText("Pause");
        pause_button.setToolTipText("Pauses the selected entry.");
        pause_button.addActionListener(new PauseButtonListener(this));

        unpause_button.setText("Unpause");
        unpause_button.setToolTipText("Unpauses the selected entry.");
        unpause_button.addActionListener(new UnpauseButtonListener(this));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remove_button, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pause_button, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unpause_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_button)
                    .addComponent(remove_button)
                    .addComponent(pause_button)
                    .addComponent(unpause_button))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        queueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        queueTable.getTableHeader().setReorderingAllowed(false);
        queueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queueTableMouseClicked(evt);
            }
        });
        queueTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                queueTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(queueTable);
        if (queueTable.getColumnModel().getColumnCount() > 0) {
            queueTable.getColumnModel().getColumn(0).setResizable(false);
            queueTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("The queue is empty.");

        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        queueTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() 
        {
            public void valueChanged(ListSelectionEvent lse) 
            {
                row = queueTable.getSelectedRow();
                if (!lse.getValueIsAdjusting()) 
                {                    
                    if(row != -1 && queueTable.getValueAt(row, 1).toString().equals("Unpaused"))
                    {
                        pause_button.setEnabled(true);
                        unpause_button.setEnabled(false);
                        remove_button.setEnabled(true);
                    }            
                    else if(row != -1 && queueTable.getValueAt(row, 1).toString().equals("Paused"))
                    {
                        unpause_button.setEnabled(true);
                        remove_button.setEnabled(true);
                        pause_button.setEnabled(false);
                    }
                    else
                    {
                        pause_button.setEnabled(false);
                        unpause_button.setEnabled(false);
                        remove_button.setEnabled(false);
                    }
                }
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pause_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_buttonActionPerformed
        // TODO add your handling code here:
//        Object status = null;
//        int row = queueTable.getSelectedRow();
//        if(row != -1)        
//            status = queueTable.getValueAt(row, 1);
//        if(status != null && status.toString().equals("Paused"))
//            JOptionPane.showMessageDialog(this, "Selected entry is already paused");
//        else if(row == -1)            
//            JOptionPane.showMessageDialog(this, "Select an entry first");
//        else
//        {
//            SessionPasswordForm form = new SessionPasswordForm(this, row, "Paused","pause");
//            form.setVisible(true);                    
//        }
    }//GEN-LAST:event_pause_buttonActionPerformed

    public void setButtonState_Pause()
    {
        pause_button.setEnabled(false);
        unpause_button.setEnabled(true);
    }
    public void setButtonState_Unpause()
    {
        pause_button.setEnabled(true);
        unpause_button.setEnabled(false);
    }
    public Boolean setState(SessionPasswordForm form, int row, String state)
    {
       if(form.isAuth())
       {
           model.setValueAt(state, row, 1);
       } 
       return true;
    }
    
    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        // TODO add your handling code here:
//        loginForm login = new loginForm(this);
//        login.setVisible(true);
    }//GEN-LAST:event_add_buttonActionPerformed

    public void setTable(loginForm login)
    {
        if(login.isAuth())
        {
            RowModel row = new RowModel();
            row.name = login.getName();
            row.status = "Unpaused";
            model.addRow(new Object[]{row.name, row.status});
            jLabel1.setVisible(false);
        }
    }    
    
    private void unpause_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unpause_buttonActionPerformed
        // TODO add your handling code here:
//        Object status = null;
//        int row = queueTable.getSelectedRow();
//        if(row != -1)        
//            status = queueTable.getValueAt(row, 1);
//        if(status != null && status.toString().equals("Unpaused"))
//            JOptionPane.showMessageDialog(this, "Selected entry is already unpaused");
//        else if(row == -1) 
//            JOptionPane.showMessageDialog(this, "Select an entry first");
//        else
//        {
//            SessionPasswordForm form = new SessionPasswordForm(this, row, "Unpaused", "unpause");
//            form.setVisible(true);
//        }
    }//GEN-LAST:event_unpause_buttonActionPerformed
    
    private void queueTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_queueTablePropertyChange
        // TODO add your handling code here:      
    }//GEN-LAST:event_queueTablePropertyChange

    private void remove_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_buttonActionPerformed
        // TODO add your handling code here:
//        int row = queueTable.getSelectedRow();
//        if(row != -1)
//        {
//            SessionPasswordForm form = new SessionPasswordForm(this, row, "Unpaused","remove");
//            form.setVisible(true);
//        }
//        else if(row == -1 && queueTable.getRowCount() < 1)
//        {
//            JOptionPane.showMessageDialog(this, "No more entries to remove");   
//        }
//        else
//            JOptionPane.showMessageDialog(this, "Select an entry to remove");
    }//GEN-LAST:event_remove_buttonActionPerformed

    private void queueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queueTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_queueTableMouseClicked

    public void removeRow(int row)
    {
        model.removeRow(row);
        if(queueTable.getRowCount() < 1)
            jLabel1.setVisible(true);
        setRemoveButtonState(false);
        setPauseButtonState(false);
        setUnpauseButtonState(false);
    }
    
    public void setRemoveButtonState(Boolean value) {
        remove_button.setEnabled(value);
    }
    public void setPauseButtonState(Boolean value) {
        pause_button.setEnabled(value);
    }
    public void setUnpauseButtonState(Boolean value) {
        unpause_button.setEnabled(value);
    }
    
    public void setRowStatusVisible(Boolean value) {
        jLabel1.setVisible(value);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SECP1_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SECP1_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SECP1_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SECP1_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SECP1_Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton pause_button;
    private javax.swing.JTable queueTable;
    private javax.swing.JButton remove_button;
    private javax.swing.JButton unpause_button;
    // End of variables declaration//GEN-END:variables
}
